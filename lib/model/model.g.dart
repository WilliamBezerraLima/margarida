// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Tbplaylist.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Tbplaylist TABLE
class TableTbplaylist extends SqfEntityTableBase {
  TableTbplaylist() {
    // declare properties of EntityTable
    tableName = 'tbplaylist';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('author', DbType.text),
      SqfEntityFieldBase('title', DbType.text),
      SqfEntityFieldBase('videoId', DbType.text),
      SqfEntityFieldBase('playlistId', DbType.text),
      SqfEntityFieldBase('thumbnail', DbType.text),
      SqfEntityFieldBase('thumbnailHigh', DbType.text),
      SqfEntityFieldBase('thumbnailLow', DbType.text),
      SqfEntityFieldBase('path', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTbplaylist();
  }
}

// Tbvideo TABLE
class TableTbvideo extends SqfEntityTableBase {
  TableTbvideo() {
    // declare properties of EntityTable
    tableName = 'tbvideo';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('videoId', DbType.text),
      SqfEntityFieldBase('author', DbType.text),
      SqfEntityFieldBase('title', DbType.text),
      SqfEntityFieldBase('duration', DbType.text),
      SqfEntityFieldBase('thumbnail', DbType.text),
      SqfEntityFieldBase('thumbnailHigh', DbType.text),
      SqfEntityFieldBase('thumbnailLow', DbType.text),
      SqfEntityFieldBase('path', DbType.text),
      SqfEntityFieldRelationshipBase(
          TableTbplaylist.getInstance, DeleteRule.CASCADE,
          relationType: RelationType.ONE_TO_MANY,
          fieldName: 'playlistId',
          defaultValue: 0),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTbvideo();
  }
}

// Tbconfiguration TABLE
class TableTbconfiguration extends SqfEntityTableBase {
  TableTbconfiguration() {
    // declare properties of EntityTable
    tableName = 'tbconfiguration';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = true;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('downloadpath', DbType.text),
      SqfEntityFieldBase('darkmode', DbType.bool),
      SqfEntityFieldBase('autoplay', DbType.bool),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableTbconfiguration();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class MargaridaDbModel extends SqfEntityModelProvider {
  MargaridaDbModel() {
    databaseName = margaridaDbModel.databaseName;
    password = margaridaDbModel.password;
    dbVersion = margaridaDbModel.dbVersion;
    preSaveAction = margaridaDbModel.preSaveAction;
    logFunction = margaridaDbModel.logFunction;
    databaseTables = [
      TableTbplaylist.getInstance,
      TableTbvideo.getInstance,
      TableTbconfiguration.getInstance,
    ];

    bundledDatabasePath = margaridaDbModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
    databasePath = margaridaDbModel.databasePath;
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Tbplaylist
class Tbplaylist extends TableBase {
  Tbplaylist(
      {this.id,
      this.author,
      this.title,
      this.videoId,
      this.playlistId,
      this.thumbnail,
      this.thumbnailHigh,
      this.thumbnailLow,
      this.path,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  Tbplaylist.withFields(
      this.author,
      this.title,
      this.videoId,
      this.playlistId,
      this.thumbnail,
      this.thumbnailHigh,
      this.thumbnailLow,
      this.path,
      this.isDeleted) {
    _setDefaultValues();
  }
  Tbplaylist.withId(
      this.id,
      this.author,
      this.title,
      this.videoId,
      this.playlistId,
      this.thumbnail,
      this.thumbnailHigh,
      this.thumbnailLow,
      this.path,
      this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Tbplaylist.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['author'] != null) {
      author = o['author'].toString();
    }
    if (o['title'] != null) {
      title = o['title'].toString();
    }
    if (o['videoId'] != null) {
      videoId = o['videoId'].toString();
    }
    if (o['playlistId'] != null) {
      playlistId = o['playlistId'].toString();
    }
    if (o['thumbnail'] != null) {
      thumbnail = o['thumbnail'].toString();
    }
    if (o['thumbnailHigh'] != null) {
      thumbnailHigh = o['thumbnailHigh'].toString();
    }
    if (o['thumbnailLow'] != null) {
      thumbnailLow = o['thumbnailLow'].toString();
    }
    if (o['path'] != null) {
      path = o['path'].toString();
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (Tbplaylist)
  int? id;
  String? author;
  String? title;
  String? videoId;
  String? playlistId;
  String? thumbnail;
  String? thumbnailHigh;
  String? thumbnailLow;
  String? path;
  bool? isDeleted;

  // end FIELDS (Tbplaylist)

// COLLECTIONS & VIRTUALS (Tbplaylist)
  /// to load children of items to this field, use preload parameter. Ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plTbvideos', 'plField2'..]) or so on..
  List<Tbvideo>? plTbvideos;

  /// get Tbvideo(s) filtered by id=playlistId
  TbvideoFilterBuilder? getTbvideos(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    if (id == null) {
      return null;
    }
    return Tbvideo()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .playlistId
        .equals(id)
        .and;
  }

// END COLLECTIONS & VIRTUALS (Tbplaylist)

  static const bool _softDeleteActivated = true;
  TbplaylistManager? __mnTbplaylist;

  TbplaylistManager get _mnTbplaylist {
    return __mnTbplaylist = __mnTbplaylist ?? TbplaylistManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (author != null || !forView) {
      map['author'] = author;
    }
    if (title != null || !forView) {
      map['title'] = title;
    }
    if (videoId != null || !forView) {
      map['videoId'] = videoId;
    }
    if (playlistId != null || !forView) {
      map['playlistId'] = playlistId;
    }
    if (thumbnail != null || !forView) {
      map['thumbnail'] = thumbnail;
    }
    if (thumbnailHigh != null || !forView) {
      map['thumbnailHigh'] = thumbnailHigh;
    }
    if (thumbnailLow != null || !forView) {
      map['thumbnailLow'] = thumbnailLow;
    }
    if (path != null || !forView) {
      map['path'] = path;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (author != null || !forView) {
      map['author'] = author;
    }
    if (title != null || !forView) {
      map['title'] = title;
    }
    if (videoId != null || !forView) {
      map['videoId'] = videoId;
    }
    if (playlistId != null || !forView) {
      map['playlistId'] = playlistId;
    }
    if (thumbnail != null || !forView) {
      map['thumbnail'] = thumbnail;
    }
    if (thumbnailHigh != null || !forView) {
      map['thumbnailHigh'] = thumbnailHigh;
    }
    if (thumbnailLow != null || !forView) {
      map['thumbnailLow'] = thumbnailLow;
    }
    if (path != null || !forView) {
      map['path'] = path;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

// COLLECTIONS (Tbplaylist)
    if (!forQuery) {
      map['Tbvideos'] = await getTbvideos()!.toMapList();
    }
// END COLLECTIONS (Tbplaylist)

    return map;
  }

  /// This method returns Json String [Tbplaylist]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Tbplaylist]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      author,
      title,
      videoId,
      playlistId,
      thumbnail,
      thumbnailHigh,
      thumbnailLow,
      path,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      author,
      title,
      videoId,
      playlistId,
      thumbnail,
      thumbnailHigh,
      thumbnailLow,
      path,
      isDeleted
    ];
  }

  static Future<List<Tbplaylist>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Tbplaylist.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Tbplaylist>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Tbplaylist>[];
    try {
      objList = list
          .map((tbplaylist) =>
              Tbplaylist.fromMap(tbplaylist as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Tbplaylist.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Tbplaylist>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Tbplaylist> objList = <Tbplaylist>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Tbplaylist.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('tbplaylist.plTbvideos') && */ (preloadFields ==
                null ||
            preloadFields.contains('plTbvideos'))) {
          /*_loadedfields!.add('tbplaylist.plTbvideos'); */ obj.plTbvideos =
              obj.plTbvideos ??
                  await obj.getTbvideos()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Tbplaylist by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Tbplaylist] if exist, otherwise returns null
  Future<Tbplaylist?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Tbplaylist? obj;
    final data = await _mnTbplaylist.getById([id]);
    if (data.length != 0) {
      obj = Tbplaylist.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('tbplaylist.plTbvideos') && */ (preloadFields ==
                null ||
            preloadFields.contains('plTbvideos'))) {
          /*_loadedfields!.add('tbplaylist.plTbvideos'); */ obj.plTbvideos =
              obj.plTbvideos ??
                  await obj.getTbvideos()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Tbplaylist) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnTbplaylist.insert(this, ignoreBatch);
    } else {
      await _mnTbplaylist.update(this);
    }

    return id;
  }

  /// Saves the (Tbplaylist) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnTbplaylist.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnTbplaylist.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Tbplaylist. Returns a new Primary Key value of Tbplaylist

  /// <returns>Returns a new Primary Key value of Tbplaylist
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Tbplaylist> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Tbplaylist> tbplaylists,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MargaridaDbModel().batchStart();
    for (final obj in tbplaylists) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MargaridaDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < tbplaylists.length; i++) {
        if (tbplaylists[i].id == null) {
          tbplaylists[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnTbplaylist.rawInsert(
          'INSERT OR REPLACE INTO tbplaylist (id, author, title, videoId, playlistId, thumbnail, thumbnailHigh, thumbnailLow, path,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            author,
            title,
            videoId,
            playlistId,
            thumbnail,
            thumbnailHigh,
            thumbnailLow,
            path,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Tbplaylist id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Tbplaylist id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Tbplaylist Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Tbplaylist>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Tbplaylist> tbplaylists,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnTbplaylist.rawInsertAll(
        'INSERT OR REPLACE INTO tbplaylist (id, author, title, videoId, playlistId, thumbnail, thumbnailHigh, thumbnailLow, path,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?)',
        tbplaylists,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Tbplaylist

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Tbplaylist invoked (id=$id)');
    var result = BoolResult(success: false);
    {
      result =
          await Tbvideo().select().playlistId.equals(id).and.delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnTbplaylist
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnTbplaylist.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Tbplaylist

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover Tbplaylist invoked (id=$id)');
    var result = BoolResult(success: false);
    if (recoverChilds) {
      result = await Tbvideo()
          .select(getIsDeleted: true)
          .isDeleted
          .equals(true)
          .and
          .playlistId
          .equals(id)
          .and
          .update({'isDeleted': 0});
    }
    if (!result.success && recoverChilds) {
      return result;
    }
    {
      return _mnTbplaylist.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  TbplaylistFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TbplaylistFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  TbplaylistFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TbplaylistFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion tbplaylist

// region TbplaylistField
class TbplaylistField extends FilterBase {
  TbplaylistField(TbplaylistFilterBuilder tbplaylistFB) : super(tbplaylistFB);

  @override
  TbplaylistFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as TbplaylistFilterBuilder;
  }

  @override
  TbplaylistFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as TbplaylistFilterBuilder;
  }

  @override
  TbplaylistFilterBuilder isNull() {
    return super.isNull() as TbplaylistFilterBuilder;
  }

  @override
  TbplaylistFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as TbplaylistFilterBuilder;
  }

  @override
  TbplaylistFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as TbplaylistFilterBuilder;
  }

  @override
  TbplaylistFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as TbplaylistFilterBuilder;
  }

  @override
  TbplaylistFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as TbplaylistFilterBuilder;
  }

  @override
  TbplaylistFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as TbplaylistFilterBuilder;
  }

  @override
  TbplaylistFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as TbplaylistFilterBuilder;
  }

  @override
  TbplaylistFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as TbplaylistFilterBuilder;
  }

  @override
  TbplaylistFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as TbplaylistFilterBuilder;
  }

  @override
  TbplaylistFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as TbplaylistFilterBuilder;
  }

  @override
  TbplaylistField get not {
    return super.not as TbplaylistField;
  }
}
// endregion TbplaylistField

// region TbplaylistFilterBuilder
class TbplaylistFilterBuilder extends ConjunctionBase {
  TbplaylistFilterBuilder(Tbplaylist obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnTbplaylist = obj._mnTbplaylist;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  TbplaylistManager? _mnTbplaylist;

  /// put the sql keyword 'AND'
  @override
  TbplaylistFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  TbplaylistFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  TbplaylistFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  TbplaylistFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  TbplaylistFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  TbplaylistFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  TbplaylistFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TbplaylistFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TbplaylistFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TbplaylistFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TbplaylistFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  TbplaylistField _setField(
      TbplaylistField? field, String colName, DbType dbtype) {
    return TbplaylistField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  TbplaylistField? _id;
  TbplaylistField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  TbplaylistField? _author;
  TbplaylistField get author {
    return _author = _setField(_author, 'author', DbType.text);
  }

  TbplaylistField? _title;
  TbplaylistField get title {
    return _title = _setField(_title, 'title', DbType.text);
  }

  TbplaylistField? _videoId;
  TbplaylistField get videoId {
    return _videoId = _setField(_videoId, 'videoId', DbType.text);
  }

  TbplaylistField? _playlistId;
  TbplaylistField get playlistId {
    return _playlistId = _setField(_playlistId, 'playlistId', DbType.text);
  }

  TbplaylistField? _thumbnail;
  TbplaylistField get thumbnail {
    return _thumbnail = _setField(_thumbnail, 'thumbnail', DbType.text);
  }

  TbplaylistField? _thumbnailHigh;
  TbplaylistField get thumbnailHigh {
    return _thumbnailHigh =
        _setField(_thumbnailHigh, 'thumbnailHigh', DbType.text);
  }

  TbplaylistField? _thumbnailLow;
  TbplaylistField get thumbnailLow {
    return _thumbnailLow =
        _setField(_thumbnailLow, 'thumbnailLow', DbType.text);
  }

  TbplaylistField? _path;
  TbplaylistField get path {
    return _path = _setField(_path, 'path', DbType.text);
  }

  TbplaylistField? _isDeleted;
  TbplaylistField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<Tbplaylist> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);
    // Delete sub records where in (Tbvideo) according to DeleteRule.CASCADE
    final idListTbvideoBYplaylistId = toListPrimaryKeySQL(false);
    final resTbvideoBYplaylistId = await Tbvideo()
        .select()
        .where('playlistId IN (${idListTbvideoBYplaylistId['sql']})',
            parameterValue: idListTbvideoBYplaylistId['args'])
        .delete(hardDelete);
    if (!resTbvideoBYplaylistId.success) {
      return resTbvideoBYplaylistId;
    }

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnTbplaylist!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnTbplaylist!.delete(qparams);
    }
    return r;
  }

  /// Recover List<Tbplaylist> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover Tbplaylist bulk invoked');
    // Recover sub records where in (Tbvideo) according to DeleteRule.CASCADE
    final idListTbvideoBYplaylistId = toListPrimaryKeySQL(false);
    final resTbvideoBYplaylistId = await Tbvideo()
        .select()
        .where('playlistId IN (${idListTbvideoBYplaylistId['sql']})',
            parameterValue: idListTbvideoBYplaylistId['args'])
        .update({'isDeleted': 0});
    if (!resTbvideoBYplaylistId.success) {
      return resTbvideoBYplaylistId;
    }
    return _mnTbplaylist!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from tbplaylist ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnTbplaylist!.updateBatch(qparams, values);
  }

  /// This method always returns [Tbplaylist] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Tbplaylist?
  @override
  Future<Tbplaylist?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnTbplaylist!.toList(qparams);
    final data = await objFuture;
    Tbplaylist? obj;
    if (data.isNotEmpty) {
      obj = Tbplaylist.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD CHILD
      if (preload) {
        loadedFields = loadedFields ?? [];
        if (/*!_loadedfields!.contains('tbplaylist.plTbvideos') && */ (preloadFields ==
                null ||
            preloadFields.contains('plTbvideos'))) {
          /*_loadedfields!.add('tbplaylist.plTbvideos'); */ obj.plTbvideos =
              obj.plTbvideos ??
                  await obj.getTbvideos()!.toList(
                      preload: preload,
                      preloadFields: preloadFields,
                      loadParents: false /*, loadedFields:_loadedFields*/);
        }
      } // END RELATIONSHIPS PRELOAD CHILD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Tbplaylist]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Tbplaylist?
  @override
  Future<Tbplaylist> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Tbplaylist();
  }

  /// This method returns int. [Tbplaylist]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? tbplaylistCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final tbplaylistsFuture = await _mnTbplaylist!.toList(qparams);
    final int count = tbplaylistsFuture[0]['CNT'] as int;
    if (tbplaylistCount != null) {
      tbplaylistCount(count);
    }
    return count;
  }

  /// This method returns List<Tbplaylist> [Tbplaylist]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Tbplaylist>
  @override
  Future<List<Tbplaylist>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Tbplaylist> tbplaylistsData = await Tbplaylist.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return tbplaylistsData;
  }

  /// This method returns Json String [Tbplaylist]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Tbplaylist]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Tbplaylist]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnTbplaylist!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Tbplaylist]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM tbplaylist WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnTbplaylist!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Tbplaylist]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnTbplaylist!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Tbplaylist.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnTbplaylist!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion TbplaylistFilterBuilder

// region TbplaylistFields
class TbplaylistFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fAuthor;
  static TableField get author {
    return _fAuthor =
        _fAuthor ?? SqlSyntax.setField(_fAuthor, 'author', DbType.text);
  }

  static TableField? _fTitle;
  static TableField get title {
    return _fTitle =
        _fTitle ?? SqlSyntax.setField(_fTitle, 'title', DbType.text);
  }

  static TableField? _fVideoId;
  static TableField get videoId {
    return _fVideoId =
        _fVideoId ?? SqlSyntax.setField(_fVideoId, 'videoId', DbType.text);
  }

  static TableField? _fPlaylistId;
  static TableField get playlistId {
    return _fPlaylistId = _fPlaylistId ??
        SqlSyntax.setField(_fPlaylistId, 'playlistId', DbType.text);
  }

  static TableField? _fThumbnail;
  static TableField get thumbnail {
    return _fThumbnail = _fThumbnail ??
        SqlSyntax.setField(_fThumbnail, 'thumbnail', DbType.text);
  }

  static TableField? _fThumbnailHigh;
  static TableField get thumbnailHigh {
    return _fThumbnailHigh = _fThumbnailHigh ??
        SqlSyntax.setField(_fThumbnailHigh, 'thumbnailHigh', DbType.text);
  }

  static TableField? _fThumbnailLow;
  static TableField get thumbnailLow {
    return _fThumbnailLow = _fThumbnailLow ??
        SqlSyntax.setField(_fThumbnailLow, 'thumbnailLow', DbType.text);
  }

  static TableField? _fPath;
  static TableField get path {
    return _fPath = _fPath ?? SqlSyntax.setField(_fPath, 'path', DbType.text);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion TbplaylistFields

//region TbplaylistManager
class TbplaylistManager extends SqfEntityProvider {
  TbplaylistManager()
      : super(MargaridaDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'tbplaylist';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion TbplaylistManager
// region Tbvideo
class Tbvideo extends TableBase {
  Tbvideo(
      {this.id,
      this.videoId,
      this.author,
      this.title,
      this.duration,
      this.thumbnail,
      this.thumbnailHigh,
      this.thumbnailLow,
      this.path,
      this.playlistId,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  Tbvideo.withFields(
      this.videoId,
      this.author,
      this.title,
      this.duration,
      this.thumbnail,
      this.thumbnailHigh,
      this.thumbnailLow,
      this.path,
      this.playlistId,
      this.isDeleted) {
    _setDefaultValues();
  }
  Tbvideo.withId(
      this.id,
      this.videoId,
      this.author,
      this.title,
      this.duration,
      this.thumbnail,
      this.thumbnailHigh,
      this.thumbnailLow,
      this.path,
      this.playlistId,
      this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Tbvideo.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['videoId'] != null) {
      videoId = o['videoId'].toString();
    }
    if (o['author'] != null) {
      author = o['author'].toString();
    }
    if (o['title'] != null) {
      title = o['title'].toString();
    }
    if (o['duration'] != null) {
      duration = o['duration'].toString();
    }
    if (o['thumbnail'] != null) {
      thumbnail = o['thumbnail'].toString();
    }
    if (o['thumbnailHigh'] != null) {
      thumbnailHigh = o['thumbnailHigh'].toString();
    }
    if (o['thumbnailLow'] != null) {
      thumbnailLow = o['thumbnailLow'].toString();
    }
    if (o['path'] != null) {
      path = o['path'].toString();
    }
    playlistId = int.tryParse(o['playlistId'].toString());

    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;

    // RELATIONSHIPS FromMAP
    plTbplaylist = o['tbplaylist'] != null
        ? Tbplaylist.fromMap(o['tbplaylist'] as Map<String, dynamic>)
        : null;
    // END RELATIONSHIPS FromMAP
  }
  // FIELDS (Tbvideo)
  int? id;
  String? videoId;
  String? author;
  String? title;
  String? duration;
  String? thumbnail;
  String? thumbnailHigh;
  String? thumbnailLow;
  String? path;
  int? playlistId;
  bool? isDeleted;

  // end FIELDS (Tbvideo)

// RELATIONSHIPS (Tbvideo)
  /// to load parent of items to this field, use preload parameter ex: toList(preload:true) or toSingle(preload:true) or getById(preload:true)
  /// You can also specify this object into certain preload fields!. Ex: toList(preload:true, preloadFields:['plTbplaylist', 'plField2'..]) or so on..
  Tbplaylist? plTbplaylist;

  /// get Tbplaylist By PlaylistId
  Future<Tbplaylist?> getTbplaylist(
      {bool loadParents = false, List<String>? loadedFields}) async {
    final _obj = await Tbplaylist().getById(playlistId,
        loadParents: loadParents, loadedFields: loadedFields);
    return _obj;
  }
  // END RELATIONSHIPS (Tbvideo)

  static const bool _softDeleteActivated = true;
  TbvideoManager? __mnTbvideo;

  TbvideoManager get _mnTbvideo {
    return __mnTbvideo = __mnTbvideo ?? TbvideoManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (videoId != null || !forView) {
      map['videoId'] = videoId;
    }
    if (author != null || !forView) {
      map['author'] = author;
    }
    if (title != null || !forView) {
      map['title'] = title;
    }
    if (duration != null || !forView) {
      map['duration'] = duration;
    }
    if (thumbnail != null || !forView) {
      map['thumbnail'] = thumbnail;
    }
    if (thumbnailHigh != null || !forView) {
      map['thumbnailHigh'] = thumbnailHigh;
    }
    if (thumbnailLow != null || !forView) {
      map['thumbnailLow'] = thumbnailLow;
    }
    if (path != null || !forView) {
      map['path'] = path;
    }
    if (playlistId != null) {
      map['playlistId'] = forView
          ? plTbplaylist == null
              ? playlistId
              : plTbplaylist!.author
          : playlistId;
    } else if (playlistId != null || !forView) {
      map['playlistId'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (videoId != null || !forView) {
      map['videoId'] = videoId;
    }
    if (author != null || !forView) {
      map['author'] = author;
    }
    if (title != null || !forView) {
      map['title'] = title;
    }
    if (duration != null || !forView) {
      map['duration'] = duration;
    }
    if (thumbnail != null || !forView) {
      map['thumbnail'] = thumbnail;
    }
    if (thumbnailHigh != null || !forView) {
      map['thumbnailHigh'] = thumbnailHigh;
    }
    if (thumbnailLow != null || !forView) {
      map['thumbnailLow'] = thumbnailLow;
    }
    if (path != null || !forView) {
      map['path'] = path;
    }
    if (playlistId != null) {
      map['playlistId'] = forView
          ? plTbplaylist == null
              ? playlistId
              : plTbplaylist!.author
          : playlistId;
    } else if (playlistId != null || !forView) {
      map['playlistId'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Tbvideo]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Tbvideo]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      videoId,
      author,
      title,
      duration,
      thumbnail,
      thumbnailHigh,
      thumbnailLow,
      path,
      playlistId,
      isDeleted
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      videoId,
      author,
      title,
      duration,
      thumbnail,
      thumbnailHigh,
      thumbnailLow,
      path,
      playlistId,
      isDeleted
    ];
  }

  static Future<List<Tbvideo>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Tbvideo.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Tbvideo>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Tbvideo>[];
    try {
      objList = list
          .map((tbvideo) => Tbvideo.fromMap(tbvideo as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Tbvideo.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Tbvideo>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Tbvideo> objList = <Tbvideo>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Tbvideo.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);
      // final List<String> _loadedFields = List<String>.from(loadedFields);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plTbplaylist'))) {
          obj.plTbplaylist = obj.plTbplaylist ??
              await obj.getTbplaylist(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD

      objList.add(obj);
    }
    return objList;
  }

  /// returns Tbvideo by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Tbvideo] if exist, otherwise returns null
  Future<Tbvideo?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Tbvideo? obj;
    final data = await _mnTbvideo.getById([id]);
    if (data.length != 0) {
      obj = Tbvideo.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plTbplaylist'))) {
          obj.plTbplaylist = obj.plTbplaylist ??
              await obj.getTbplaylist(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Tbvideo) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnTbvideo.insert(this, ignoreBatch);
    } else {
      await _mnTbvideo.update(this);
    }

    return id;
  }

  /// Saves the (Tbvideo) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnTbvideo.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnTbvideo.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Tbvideo. Returns a new Primary Key value of Tbvideo

  /// <returns>Returns a new Primary Key value of Tbvideo
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Tbvideo> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Tbvideo> tbvideos,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MargaridaDbModel().batchStart();
    for (final obj in tbvideos) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MargaridaDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < tbvideos.length; i++) {
        if (tbvideos[i].id == null) {
          tbvideos[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnTbvideo.rawInsert(
          'INSERT OR REPLACE INTO tbvideo (id, videoId, author, title, duration, thumbnail, thumbnailHigh, thumbnailLow, path, playlistId,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            videoId,
            author,
            title,
            duration,
            thumbnail,
            thumbnailHigh,
            thumbnailLow,
            path,
            playlistId,
            isDeleted
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Tbvideo id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Tbvideo id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Tbvideo Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Tbvideo>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Tbvideo> tbvideos,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnTbvideo.rawInsertAll(
        'INSERT OR REPLACE INTO tbvideo (id, videoId, author, title, duration, thumbnail, thumbnailHigh, thumbnailLow, path, playlistId,isDeleted)  VALUES (?,?,?,?,?,?,?,?,?,?,?)',
        tbvideos,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Tbvideo

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Tbvideo invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnTbvideo
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnTbvideo.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Tbvideo

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover Tbvideo invoked (id=$id)');
    {
      return _mnTbvideo.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  TbvideoFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TbvideoFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  TbvideoFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TbvideoFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    playlistId = playlistId ?? 0;
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion tbvideo

// region TbvideoField
class TbvideoField extends FilterBase {
  TbvideoField(TbvideoFilterBuilder tbvideoFB) : super(tbvideoFB);

  @override
  TbvideoFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as TbvideoFilterBuilder;
  }

  @override
  TbvideoFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as TbvideoFilterBuilder;
  }

  @override
  TbvideoFilterBuilder isNull() {
    return super.isNull() as TbvideoFilterBuilder;
  }

  @override
  TbvideoFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as TbvideoFilterBuilder;
  }

  @override
  TbvideoFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as TbvideoFilterBuilder;
  }

  @override
  TbvideoFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as TbvideoFilterBuilder;
  }

  @override
  TbvideoFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as TbvideoFilterBuilder;
  }

  @override
  TbvideoFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as TbvideoFilterBuilder;
  }

  @override
  TbvideoFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as TbvideoFilterBuilder;
  }

  @override
  TbvideoFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as TbvideoFilterBuilder;
  }

  @override
  TbvideoFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as TbvideoFilterBuilder;
  }

  @override
  TbvideoFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as TbvideoFilterBuilder;
  }

  @override
  TbvideoField get not {
    return super.not as TbvideoField;
  }
}
// endregion TbvideoField

// region TbvideoFilterBuilder
class TbvideoFilterBuilder extends ConjunctionBase {
  TbvideoFilterBuilder(Tbvideo obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnTbvideo = obj._mnTbvideo;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  TbvideoManager? _mnTbvideo;

  /// put the sql keyword 'AND'
  @override
  TbvideoFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  TbvideoFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  TbvideoFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  TbvideoFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  TbvideoFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  TbvideoFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  TbvideoFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TbvideoFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TbvideoFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TbvideoFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TbvideoFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  TbvideoField _setField(TbvideoField? field, String colName, DbType dbtype) {
    return TbvideoField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  TbvideoField? _id;
  TbvideoField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  TbvideoField? _videoId;
  TbvideoField get videoId {
    return _videoId = _setField(_videoId, 'videoId', DbType.text);
  }

  TbvideoField? _author;
  TbvideoField get author {
    return _author = _setField(_author, 'author', DbType.text);
  }

  TbvideoField? _title;
  TbvideoField get title {
    return _title = _setField(_title, 'title', DbType.text);
  }

  TbvideoField? _duration;
  TbvideoField get duration {
    return _duration = _setField(_duration, 'duration', DbType.text);
  }

  TbvideoField? _thumbnail;
  TbvideoField get thumbnail {
    return _thumbnail = _setField(_thumbnail, 'thumbnail', DbType.text);
  }

  TbvideoField? _thumbnailHigh;
  TbvideoField get thumbnailHigh {
    return _thumbnailHigh =
        _setField(_thumbnailHigh, 'thumbnailHigh', DbType.text);
  }

  TbvideoField? _thumbnailLow;
  TbvideoField get thumbnailLow {
    return _thumbnailLow =
        _setField(_thumbnailLow, 'thumbnailLow', DbType.text);
  }

  TbvideoField? _path;
  TbvideoField get path {
    return _path = _setField(_path, 'path', DbType.text);
  }

  TbvideoField? _playlistId;
  TbvideoField get playlistId {
    return _playlistId = _setField(_playlistId, 'playlistId', DbType.integer);
  }

  TbvideoField? _isDeleted;
  TbvideoField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<Tbvideo> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnTbvideo!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnTbvideo!.delete(qparams);
    }
    return r;
  }

  /// Recover List<Tbvideo> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover Tbvideo bulk invoked');
    return _mnTbvideo!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from tbvideo ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnTbvideo!.updateBatch(qparams, values);
  }

  /// This method always returns [Tbvideo] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Tbvideo?
  @override
  Future<Tbvideo?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnTbvideo!.toList(qparams);
    final data = await objFuture;
    Tbvideo? obj;
    if (data.isNotEmpty) {
      obj = Tbvideo.fromMap(data[0] as Map<String, dynamic>);

      // RELATIONSHIPS PRELOAD
      if (preload || loadParents) {
        loadedFields = loadedFields ?? [];
        if ((preloadFields == null ||
            loadParents ||
            preloadFields.contains('plTbplaylist'))) {
          obj.plTbplaylist = obj.plTbplaylist ??
              await obj.getTbplaylist(loadParents: loadParents);
        }
      } // END RELATIONSHIPS PRELOAD
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Tbvideo]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Tbvideo?
  @override
  Future<Tbvideo> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Tbvideo();
  }

  /// This method returns int. [Tbvideo]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? tbvideoCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final tbvideosFuture = await _mnTbvideo!.toList(qparams);
    final int count = tbvideosFuture[0]['CNT'] as int;
    if (tbvideoCount != null) {
      tbvideoCount(count);
    }
    return count;
  }

  /// This method returns List<Tbvideo> [Tbvideo]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Tbvideo>
  @override
  Future<List<Tbvideo>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Tbvideo> tbvideosData = await Tbvideo.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return tbvideosData;
  }

  /// This method returns Json String [Tbvideo]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Tbvideo]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Tbvideo]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnTbvideo!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Tbvideo]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM tbvideo WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnTbvideo!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Tbvideo]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnTbvideo!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Tbvideo.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnTbvideo!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion TbvideoFilterBuilder

// region TbvideoFields
class TbvideoFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fVideoId;
  static TableField get videoId {
    return _fVideoId =
        _fVideoId ?? SqlSyntax.setField(_fVideoId, 'videoId', DbType.text);
  }

  static TableField? _fAuthor;
  static TableField get author {
    return _fAuthor =
        _fAuthor ?? SqlSyntax.setField(_fAuthor, 'author', DbType.text);
  }

  static TableField? _fTitle;
  static TableField get title {
    return _fTitle =
        _fTitle ?? SqlSyntax.setField(_fTitle, 'title', DbType.text);
  }

  static TableField? _fDuration;
  static TableField get duration {
    return _fDuration =
        _fDuration ?? SqlSyntax.setField(_fDuration, 'duration', DbType.text);
  }

  static TableField? _fThumbnail;
  static TableField get thumbnail {
    return _fThumbnail = _fThumbnail ??
        SqlSyntax.setField(_fThumbnail, 'thumbnail', DbType.text);
  }

  static TableField? _fThumbnailHigh;
  static TableField get thumbnailHigh {
    return _fThumbnailHigh = _fThumbnailHigh ??
        SqlSyntax.setField(_fThumbnailHigh, 'thumbnailHigh', DbType.text);
  }

  static TableField? _fThumbnailLow;
  static TableField get thumbnailLow {
    return _fThumbnailLow = _fThumbnailLow ??
        SqlSyntax.setField(_fThumbnailLow, 'thumbnailLow', DbType.text);
  }

  static TableField? _fPath;
  static TableField get path {
    return _fPath = _fPath ?? SqlSyntax.setField(_fPath, 'path', DbType.text);
  }

  static TableField? _fPlaylistId;
  static TableField get playlistId {
    return _fPlaylistId = _fPlaylistId ??
        SqlSyntax.setField(_fPlaylistId, 'playlistId', DbType.integer);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion TbvideoFields

//region TbvideoManager
class TbvideoManager extends SqfEntityProvider {
  TbvideoManager()
      : super(MargaridaDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'tbvideo';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion TbvideoManager
// region Tbconfiguration
class Tbconfiguration extends TableBase {
  Tbconfiguration(
      {this.id,
      this.downloadpath,
      this.darkmode,
      this.autoplay,
      this.isDeleted}) {
    _setDefaultValues();
    softDeleteActivated = true;
  }
  Tbconfiguration.withFields(
      this.downloadpath, this.darkmode, this.autoplay, this.isDeleted) {
    _setDefaultValues();
  }
  Tbconfiguration.withId(this.id, this.downloadpath, this.darkmode,
      this.autoplay, this.isDeleted) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Tbconfiguration.fromMap(Map<String, dynamic> o,
      {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['downloadpath'] != null) {
      downloadpath = o['downloadpath'].toString();
    }
    if (o['darkmode'] != null) {
      darkmode =
          o['darkmode'].toString() == '1' || o['darkmode'].toString() == 'true';
    }
    if (o['autoplay'] != null) {
      autoplay =
          o['autoplay'].toString() == '1' || o['autoplay'].toString() == 'true';
    }
    isDeleted = o['isDeleted'] != null
        ? o['isDeleted'] == 1 || o['isDeleted'] == true
        : null;
  }
  // FIELDS (Tbconfiguration)
  int? id;
  String? downloadpath;
  bool? darkmode;
  bool? autoplay;
  bool? isDeleted;

  // end FIELDS (Tbconfiguration)

  static const bool _softDeleteActivated = true;
  TbconfigurationManager? __mnTbconfiguration;

  TbconfigurationManager get _mnTbconfiguration {
    return __mnTbconfiguration =
        __mnTbconfiguration ?? TbconfigurationManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (downloadpath != null || !forView) {
      map['downloadpath'] = downloadpath;
    }
    if (darkmode != null) {
      map['darkmode'] = forQuery ? (darkmode! ? 1 : 0) : darkmode;
    } else if (darkmode != null || !forView) {
      map['darkmode'] = null;
    }
    if (autoplay != null) {
      map['autoplay'] = forQuery ? (autoplay! ? 1 : 0) : autoplay;
    } else if (autoplay != null || !forView) {
      map['autoplay'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (downloadpath != null || !forView) {
      map['downloadpath'] = downloadpath;
    }
    if (darkmode != null) {
      map['darkmode'] = forQuery ? (darkmode! ? 1 : 0) : darkmode;
    } else if (darkmode != null || !forView) {
      map['darkmode'] = null;
    }
    if (autoplay != null) {
      map['autoplay'] = forQuery ? (autoplay! ? 1 : 0) : autoplay;
    } else if (autoplay != null || !forView) {
      map['autoplay'] = null;
    }
    if (isDeleted != null) {
      map['isDeleted'] = forQuery ? (isDeleted! ? 1 : 0) : isDeleted;
    }

    return map;
  }

  /// This method returns Json String [Tbconfiguration]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Tbconfiguration]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [downloadpath, darkmode, autoplay, isDeleted];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, downloadpath, darkmode, autoplay, isDeleted];
  }

  static Future<List<Tbconfiguration>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Tbconfiguration.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Tbconfiguration>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Tbconfiguration>[];
    try {
      objList = list
          .map((tbconfiguration) =>
              Tbconfiguration.fromMap(tbconfiguration as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Tbconfiguration.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Tbconfiguration>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Tbconfiguration> objList = <Tbconfiguration>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Tbconfiguration.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Tbconfiguration by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Tbconfiguration] if exist, otherwise returns null
  Future<Tbconfiguration?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Tbconfiguration? obj;
    final data = await _mnTbconfiguration.getById([id]);
    if (data.length != 0) {
      obj = Tbconfiguration.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Tbconfiguration) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnTbconfiguration.insert(this, ignoreBatch);
    } else {
      await _mnTbconfiguration.update(this);
    }

    return id;
  }

  /// Saves the (Tbconfiguration) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnTbconfiguration.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnTbconfiguration.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Tbconfiguration. Returns a new Primary Key value of Tbconfiguration

  /// <returns>Returns a new Primary Key value of Tbconfiguration
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  /// saveAll method saves the sent List<Tbconfiguration> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Tbconfiguration> tbconfigurations,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await MargaridaDbModel().batchStart();
    for (final obj in tbconfigurations) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await MargaridaDbModel().batchCommit(
          exclusive: exclusive,
          noResult: noResult,
          continueOnError: continueOnError);
      for (int i = 0; i < tbconfigurations.length; i++) {
        if (tbconfigurations[i].id == null) {
          tbconfigurations[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnTbconfiguration.rawInsert(
          'INSERT OR REPLACE INTO tbconfiguration (id, downloadpath, darkmode, autoplay,isDeleted)  VALUES (?,?,?,?,?)',
          [id, downloadpath, darkmode, autoplay, isDeleted],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Tbconfiguration id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false,
            errorMessage: 'Tbconfiguration id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Tbconfiguration Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Tbconfiguration>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Tbconfiguration> tbconfigurations,
      {bool? exclusive, bool? noResult, bool? continueOnError}) async {
    final results = await _mnTbconfiguration.rawInsertAll(
        'INSERT OR REPLACE INTO tbconfiguration (id, downloadpath, darkmode, autoplay,isDeleted)  VALUES (?,?,?,?,?)',
        tbconfigurations,
        exclusive: exclusive,
        noResult: noResult,
        continueOnError: continueOnError);
    return results;
  }

  /// Deletes Tbconfiguration

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Tbconfiguration invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete || isDeleted!) {
      return _mnTbconfiguration
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnTbconfiguration.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  /// Recover Tbconfiguration

  /// <returns>BoolResult res.success=Recovered, not res.success=Can not recovered
  @override
  Future<BoolResult> recover([bool recoverChilds = true]) async {
    debugPrint('SQFENTITIY: recover Tbconfiguration invoked (id=$id)');
    {
      return _mnTbconfiguration.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 0});
    }
  }

  @override
  TbconfigurationFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TbconfigurationFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  TbconfigurationFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return TbconfigurationFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    isDeleted = isDeleted ?? false;
  }

  @override
  void rollbackPk() {
    if (isInsert == true) {
      id = null;
    }
  }

  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion tbconfiguration

// region TbconfigurationField
class TbconfigurationField extends FilterBase {
  TbconfigurationField(TbconfigurationFilterBuilder tbconfigurationFB)
      : super(tbconfigurationFB);

  @override
  TbconfigurationFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as TbconfigurationFilterBuilder;
  }

  @override
  TbconfigurationFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as TbconfigurationFilterBuilder;
  }

  @override
  TbconfigurationFilterBuilder isNull() {
    return super.isNull() as TbconfigurationFilterBuilder;
  }

  @override
  TbconfigurationFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as TbconfigurationFilterBuilder;
  }

  @override
  TbconfigurationFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as TbconfigurationFilterBuilder;
  }

  @override
  TbconfigurationFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as TbconfigurationFilterBuilder;
  }

  @override
  TbconfigurationFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as TbconfigurationFilterBuilder;
  }

  @override
  TbconfigurationFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as TbconfigurationFilterBuilder;
  }

  @override
  TbconfigurationFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as TbconfigurationFilterBuilder;
  }

  @override
  TbconfigurationFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as TbconfigurationFilterBuilder;
  }

  @override
  TbconfigurationFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as TbconfigurationFilterBuilder;
  }

  @override
  TbconfigurationFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as TbconfigurationFilterBuilder;
  }

  @override
  TbconfigurationField get not {
    return super.not as TbconfigurationField;
  }
}
// endregion TbconfigurationField

// region TbconfigurationFilterBuilder
class TbconfigurationFilterBuilder extends ConjunctionBase {
  TbconfigurationFilterBuilder(Tbconfiguration obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnTbconfiguration = obj._mnTbconfiguration;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  TbconfigurationManager? _mnTbconfiguration;

  /// put the sql keyword 'AND'
  @override
  TbconfigurationFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  TbconfigurationFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  TbconfigurationFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  TbconfigurationFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  TbconfigurationFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  TbconfigurationFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  TbconfigurationFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TbconfigurationFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TbconfigurationFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  TbconfigurationFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  TbconfigurationFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  TbconfigurationField _setField(
      TbconfigurationField? field, String colName, DbType dbtype) {
    return TbconfigurationField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  TbconfigurationField? _id;
  TbconfigurationField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  TbconfigurationField? _downloadpath;
  TbconfigurationField get downloadpath {
    return _downloadpath =
        _setField(_downloadpath, 'downloadpath', DbType.text);
  }

  TbconfigurationField? _darkmode;
  TbconfigurationField get darkmode {
    return _darkmode = _setField(_darkmode, 'darkmode', DbType.bool);
  }

  TbconfigurationField? _autoplay;
  TbconfigurationField get autoplay {
    return _autoplay = _setField(_autoplay, 'autoplay', DbType.bool);
  }

  TbconfigurationField? _isDeleted;
  TbconfigurationField get isDeleted {
    return _isDeleted = _setField(_isDeleted, 'isDeleted', DbType.bool);
  }

  /// Deletes List<Tbconfiguration> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnTbconfiguration!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnTbconfiguration!.delete(qparams);
    }
    return r;
  }

  /// Recover List<Tbconfiguration> bulk by query
  @override
  Future<BoolResult> recover() async {
    buildParameters(getIsDeleted: true);
    debugPrint('SQFENTITIY: recover Tbconfiguration bulk invoked');
    return _mnTbconfiguration!.updateBatch(qparams, {'isDeleted': 0});
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from tbconfiguration ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnTbconfiguration!.updateBatch(qparams, values);
  }

  /// This method always returns [Tbconfiguration] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Tbconfiguration?
  @override
  Future<Tbconfiguration?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnTbconfiguration!.toList(qparams);
    final data = await objFuture;
    Tbconfiguration? obj;
    if (data.isNotEmpty) {
      obj = Tbconfiguration.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Tbconfiguration]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Tbconfiguration?
  @override
  Future<Tbconfiguration> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Tbconfiguration();
  }

  /// This method returns int. [Tbconfiguration]
  /// <returns>int
  @override
  Future<int> toCount(
      [VoidCallback Function(int c)? tbconfigurationCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final tbconfigurationsFuture = await _mnTbconfiguration!.toList(qparams);
    final int count = tbconfigurationsFuture[0]['CNT'] as int;
    if (tbconfigurationCount != null) {
      tbconfigurationCount(count);
    }
    return count;
  }

  /// This method returns List<Tbconfiguration> [Tbconfiguration]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Tbconfiguration>
  @override
  Future<List<Tbconfiguration>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Tbconfiguration> tbconfigurationsData =
        await Tbconfiguration.fromMapList(data,
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields,
            setDefaultValues: qparams.selectColumns == null);
    return tbconfigurationsData;
  }

  /// This method returns Json String [Tbconfiguration]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Tbconfiguration]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Tbconfiguration]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnTbconfiguration!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Tbconfiguration]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] =
        'SELECT `id` FROM tbconfiguration WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnTbconfiguration!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Tbconfiguration]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnTbconfiguration!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Tbconfiguration.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnTbconfiguration!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion TbconfigurationFilterBuilder

// region TbconfigurationFields
class TbconfigurationFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fDownloadpath;
  static TableField get downloadpath {
    return _fDownloadpath = _fDownloadpath ??
        SqlSyntax.setField(_fDownloadpath, 'downloadpath', DbType.text);
  }

  static TableField? _fDarkmode;
  static TableField get darkmode {
    return _fDarkmode =
        _fDarkmode ?? SqlSyntax.setField(_fDarkmode, 'darkmode', DbType.bool);
  }

  static TableField? _fAutoplay;
  static TableField get autoplay {
    return _fAutoplay =
        _fAutoplay ?? SqlSyntax.setField(_fAutoplay, 'autoplay', DbType.bool);
  }

  static TableField? _fIsDeleted;
  static TableField get isDeleted {
    return _fIsDeleted = _fIsDeleted ??
        SqlSyntax.setField(_fIsDeleted, 'isDeleted', DbType.integer);
  }
}
// endregion TbconfigurationFields

//region TbconfigurationManager
class TbconfigurationManager extends SqfEntityProvider {
  TbconfigurationManager()
      : super(MargaridaDbModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'tbconfiguration';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion TbconfigurationManager
class MargaridaDbModelSequenceManager extends SqfEntityProvider {
  MargaridaDbModelSequenceManager() : super(MargaridaDbModel());
}
// END OF ENTITIES
